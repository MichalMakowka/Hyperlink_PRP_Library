
Hyperlink_PROP_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000754  0800075c  0001075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000754  08000754  0001075c  2**0
                  CONTENTS
  4 .ARM          00000000  08000754  08000754  0001075c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000754  0800075c  0001075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000758  08000758  00010758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  0800075c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800075c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001075c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e9b  00000000  00000000  0001078c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000055f  00000000  00000000  00012627  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b0  00000000  00000000  00012b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000078  00000000  00000000  00012c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013fc0  00000000  00000000  00012cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001312  00000000  00000000  00026c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00069f02  00000000  00000000  00027f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00091e84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000017c  00000000  00000000  00091f00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800073c 	.word	0x0800073c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800073c 	.word	0x0800073c

080001c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	db0a      	blt.n	80001f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	490c      	ldr	r1, [pc, #48]	; (8000214 <__NVIC_SetPriority+0x4c>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	0112      	lsls	r2, r2, #4
 80001e8:	b2d2      	uxtb	r2, r2
 80001ea:	440b      	add	r3, r1
 80001ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001f0:	e00a      	b.n	8000208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	4908      	ldr	r1, [pc, #32]	; (8000218 <__NVIC_SetPriority+0x50>)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	f003 030f 	and.w	r3, r3, #15
 80001fe:	3b04      	subs	r3, #4
 8000200:	0112      	lsls	r2, r2, #4
 8000202:	b2d2      	uxtb	r2, r2
 8000204:	440b      	add	r3, r1
 8000206:	761a      	strb	r2, [r3, #24]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	e000e100 	.word	0xe000e100
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800022c:	d301      	bcc.n	8000232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800022e:	2301      	movs	r3, #1
 8000230:	e00f      	b.n	8000252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <SysTick_Config+0x40>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3b01      	subs	r3, #1
 8000238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800023a:	210f      	movs	r1, #15
 800023c:	f04f 30ff 	mov.w	r0, #4294967295
 8000240:	f7ff ffc2 	bl	80001c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <SysTick_Config+0x40>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <SysTick_Config+0x40>)
 800024c:	2207      	movs	r2, #7
 800024e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	e000e010 	.word	0xe000e010

08000260 <SystemCFG>:
 *      Author: Michal Makowka
 */
#include "config.h"


void SystemCFG (void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	 * Timer Config Formula
	 * (PSC+1)*(ARR+1) = TIMclk/Updatefrequency
	 * =64 000 000 / 10 000Hz desired
	 * PSC = 639 | ARR = 9
	 */
	RCC->CFGR |= RCC_CFGR_PLLMUL_0 | RCC_CFGR_PLLMUL_1 | RCC_CFGR_PLLMUL_2 | RCC_CFGR_PLLMUL_3;
 8000264:	4b56      	ldr	r3, [pc, #344]	; (80003c0 <SystemCFG+0x160>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a55      	ldr	r2, [pc, #340]	; (80003c0 <SystemCFG+0x160>)
 800026a:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 800026e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_DIV2;
 8000270:	4b53      	ldr	r3, [pc, #332]	; (80003c0 <SystemCFG+0x160>)
 8000272:	4a53      	ldr	r2, [pc, #332]	; (80003c0 <SystemCFG+0x160>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000278:	4b51      	ldr	r3, [pc, #324]	; (80003c0 <SystemCFG+0x160>)
 800027a:	4a51      	ldr	r2, [pc, #324]	; (80003c0 <SystemCFG+0x160>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000280:	4b4f      	ldr	r3, [pc, #316]	; (80003c0 <SystemCFG+0x160>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	4a4e      	ldr	r2, [pc, #312]	; (80003c0 <SystemCFG+0x160>)
 8000286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800028a:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800028c:	4b4c      	ldr	r3, [pc, #304]	; (80003c0 <SystemCFG+0x160>)
 800028e:	4a4c      	ldr	r2, [pc, #304]	; (80003c0 <SystemCFG+0x160>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000294:	4b4a      	ldr	r3, [pc, #296]	; (80003c0 <SystemCFG+0x160>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a49      	ldr	r2, [pc, #292]	; (80003c0 <SystemCFG+0x160>)
 800029a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800029e:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 80002a0:	4b48      	ldr	r3, [pc, #288]	; (80003c4 <SystemCFG+0x164>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a47      	ldr	r2, [pc, #284]	; (80003c4 <SystemCFG+0x164>)
 80002a6:	f043 0302 	orr.w	r3, r3, #2
 80002aa:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 80002ac:	bf00      	nop
 80002ae:	4b44      	ldr	r3, [pc, #272]	; (80003c0 <SystemCFG+0x160>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f9      	beq.n	80002ae <SystemCFG+0x4e>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002ba:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <SystemCFG+0x160>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	4a40      	ldr	r2, [pc, #256]	; (80003c0 <SystemCFG+0x160>)
 80002c0:	f043 0302 	orr.w	r3, r3, #2
 80002c4:	6053      	str	r3, [r2, #4]
	while ( (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80002c6:	bf00      	nop
 80002c8:	4b3d      	ldr	r3, [pc, #244]	; (80003c0 <SystemCFG+0x160>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	f003 030c 	and.w	r3, r3, #12
 80002d0:	2b08      	cmp	r3, #8
 80002d2:	d1f9      	bne.n	80002c8 <SystemCFG+0x68>




	// RCC clock EN configuration
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN;	// GPIO Clk Enable
 80002d4:	4b3a      	ldr	r3, [pc, #232]	; (80003c0 <SystemCFG+0x160>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a39      	ldr	r2, [pc, #228]	; (80003c0 <SystemCFG+0x160>)
 80002da:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80002de:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_CANEN;												// CAN Clk Enable
 80002e0:	4b37      	ldr	r3, [pc, #220]	; (80003c0 <SystemCFG+0x160>)
 80002e2:	69db      	ldr	r3, [r3, #28]
 80002e4:	4a36      	ldr	r2, [pc, #216]	; (80003c0 <SystemCFG+0x160>)
 80002e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ea:	61d3      	str	r3, [r2, #28]

	// Status LEDs GPIO config
	GPIOC->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0;	// GPIO Output mode
 80002ec:	4b36      	ldr	r3, [pc, #216]	; (80003c8 <SystemCFG+0x168>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a35      	ldr	r2, [pc, #212]	; (80003c8 <SystemCFG+0x168>)
 80002f2:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80002f6:	6013      	str	r3, [r2, #0]

	// LIM1 Pinout
	// Pins as output
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER15_0;
 80002f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000306:	f043 0315 	orr.w	r3, r3, #21
 800030a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER0_1 | GPIO_MODER_MODER1_1 | GPIO_MODER_MODER2_1 | GPIO_MODER_MODER15_1);
 800030c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800031a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800031e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER3_0 | GPIO_MODER_MODER10_0 | GPIO_MODER_MODER11_0 | GPIO_MODER_MODER13_0;
 8000320:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <SystemCFG+0x16c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a29      	ldr	r2, [pc, #164]	; (80003cc <SystemCFG+0x16c>)
 8000326:	f043 638a 	orr.w	r3, r3, #72351744	; 0x4500000
 800032a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800032e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER3_1 | GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1 | GPIO_MODER_MODER13_1);
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <SystemCFG+0x16c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a25      	ldr	r2, [pc, #148]	; (80003cc <SystemCFG+0x16c>)
 8000336:	f023 630a 	bic.w	r3, r3, #144703488	; 0x8a00000
 800033a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800033e:	6013      	str	r3, [r2, #0]
	// Fault Pin
	GPIOB->MODER &= ~(GPIO_MODER_MODER12_0 | GPIO_MODER_MODER12_1);		// Input
 8000340:	4b22      	ldr	r3, [pc, #136]	; (80003cc <SystemCFG+0x16c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a21      	ldr	r2, [pc, #132]	; (80003cc <SystemCFG+0x16c>)
 8000346:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800034a:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR12_0;	// Pull-Up
 800034c:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <SystemCFG+0x16c>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	4a1e      	ldr	r2, [pc, #120]	; (80003cc <SystemCFG+0x16c>)
 8000352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000356:	60d3      	str	r3, [r2, #12]

	// LIM2 Pinout
	// Pins as output
	GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0 | GPIO_MODER_MODER8_0;
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <SystemCFG+0x168>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a1a      	ldr	r2, [pc, #104]	; (80003c8 <SystemCFG+0x168>)
 800035e:	f443 33a8 	orr.w	r3, r3, #86016	; 0x15000
 8000362:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1 | GPIO_MODER_MODER8_1);
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <SystemCFG+0x168>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <SystemCFG+0x168>)
 800036a:	f423 3328 	bic.w	r3, r3, #172032	; 0x2a000
 800036e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0 | GPIO_MODER_MODER10_0;
 8000370:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800037a:	f443 13a8 	orr.w	r3, r3, #1376256	; 0x150000
 800037e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1 | GPIO_MODER_MODER10_1);
 8000380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800038a:	f423 1328 	bic.w	r3, r3, #2752512	; 0x2a0000
 800038e:	6013      	str	r3, [r2, #0]
	// Fault Pin
	GPIOB->MODER &= ~(GPIO_MODER_MODER14_0 | GPIO_MODER_MODER14_1);		// Input
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <SystemCFG+0x16c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <SystemCFG+0x16c>)
 8000396:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800039a:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR14_0;	// Pull-Up
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <SystemCFG+0x16c>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <SystemCFG+0x16c>)
 80003a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a6:	60d3      	str	r3, [r2, #12]

	SysTick_Config(64000000/100000);
 80003a8:	f44f 7020 	mov.w	r0, #640	; 0x280
 80003ac:	f7ff ff36 	bl	800021c <SysTick_Config>
	// Reset the SysTick counter value.
	SysTick->VAL = 0UL;
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <SystemCFG+0x170>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
	// Set SysTick source and IRQ.
	SysTick->CTRL = (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk);
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <SystemCFG+0x170>)
 80003b8:	2206      	movs	r2, #6
 80003ba:	601a      	str	r2, [r3, #0]
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40022000 	.word	0x40022000
 80003c8:	48000800 	.word	0x48000800
 80003cc:	48000400 	.word	0x48000400
 80003d0:	e000e010 	.word	0xe000e010

080003d4 <delay_ms>:

void delay_ms(int ms) {
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	// Enable the SysTick timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80003dc:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <delay_ms+0x40>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <delay_ms+0x40>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6013      	str	r3, [r2, #0]

	// Wait for a specified number of milliseconds
	delay = 0;
 80003e8:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <delay_ms+0x44>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
	while (delay < ms);
 80003ee:	bf00      	nop
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <delay_ms+0x44>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	dcfa      	bgt.n	80003f0 <delay_ms+0x1c>

	// Disable the SysTick timer
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <delay_ms+0x40>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a05      	ldr	r2, [pc, #20]	; (8000414 <delay_ms+0x40>)
 8000400:	f023 0301 	bic.w	r3, r3, #1
 8000404:	6013      	str	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000e010 	.word	0xe000e010
 8000418:	20000020 	.word	0x20000020

0800041c <SysTick_Handler>:
}

 */


__attribute__((interrupt)) void SysTick_Handler(void){
 800041c:	4668      	mov	r0, sp
 800041e:	f020 0107 	bic.w	r1, r0, #7
 8000422:	468d      	mov	sp, r1
 8000424:	b481      	push	{r0, r7}
 8000426:	af00      	add	r7, sp, #0
	delay++;
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <SysTick_Handler+0x20>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a03      	ldr	r2, [pc, #12]	; (800043c <SysTick_Handler+0x20>)
 8000430:	6013      	str	r3, [r2, #0]
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	bc81      	pop	{r0, r7}
 8000438:	4685      	mov	sp, r0
 800043a:	4770      	bx	lr
 800043c:	20000020 	.word	0x20000020

08000440 <main>:
#include <string.h>
#include "stm32f303x8.h"
#include "config.h"


int main(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0




	SystemCFG();
 8000446:	f7ff ff0b 	bl	8000260 <SystemCFG>
	GPIOC->ODR |= GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_2 | GPIO_ODR_3;	// Clear LEDs
 800044a:	4b8a      	ldr	r3, [pc, #552]	; (8000674 <main+0x234>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a89      	ldr	r2, [pc, #548]	; (8000674 <main+0x234>)
 8000450:	f043 030f 	orr.w	r3, r3, #15
 8000454:	6153      	str	r3, [r2, #20]
	// Clear


	GPIOB->ODR |= GPIO_ODR_11;		// STDrive Enable
 8000456:	4b88      	ldr	r3, [pc, #544]	; (8000678 <main+0x238>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a87      	ldr	r2, [pc, #540]	; (8000678 <main+0x238>)
 800045c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000460:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= GPIO_ODR_13;		// STDrive Enable
 8000462:	4b85      	ldr	r3, [pc, #532]	; (8000678 <main+0x238>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a84      	ldr	r2, [pc, #528]	; (8000678 <main+0x238>)
 8000468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800046c:	6153      	str	r3, [r2, #20]

	B_H1_OFF;
 800046e:	4b81      	ldr	r3, [pc, #516]	; (8000674 <main+0x234>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a80      	ldr	r2, [pc, #512]	; (8000674 <main+0x234>)
 8000474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000478:	6153      	str	r3, [r2, #20]
	B_L2_OFF;
 800047a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000488:	6153      	str	r3, [r2, #20]
	B_H3_OFF;
 800048a:	4b7a      	ldr	r3, [pc, #488]	; (8000674 <main+0x234>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a79      	ldr	r2, [pc, #484]	; (8000674 <main+0x234>)
 8000490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000494:	6153      	str	r3, [r2, #20]
	B_L4_OFF;
 8000496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004a4:	6153      	str	r3, [r2, #20]
	B_H5_OFF;
 80004a6:	4b73      	ldr	r3, [pc, #460]	; (8000674 <main+0x234>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a72      	ldr	r2, [pc, #456]	; (8000674 <main+0x234>)
 80004ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004b0:	6153      	str	r3, [r2, #20]
	B_L6_OFF;
 80004b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004c0:	6153      	str	r3, [r2, #20]
	uint8_t i;

	while (1) {

	// H-Bridge Driving Circuit Sequence (1-Phase)
		B_H3_ON;
 80004c2:	4b6c      	ldr	r3, [pc, #432]	; (8000674 <main+0x234>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a6b      	ldr	r2, [pc, #428]	; (8000674 <main+0x234>)
 80004c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004cc:	6153      	str	r3, [r2, #20]
		B_L2_ON;
 80004ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004dc:	6153      	str	r3, [r2, #20]
	for (i=1; i<20; i++) {
 80004de:	2301      	movs	r3, #1
 80004e0:	71fb      	strb	r3, [r7, #7]
 80004e2:	e028      	b.n	8000536 <main+0xf6>
		B_H1_OFF;
 80004e4:	4b63      	ldr	r3, [pc, #396]	; (8000674 <main+0x234>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a62      	ldr	r2, [pc, #392]	; (8000674 <main+0x234>)
 80004ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ee:	6153      	str	r3, [r2, #20]
		B_L4_OFF;
 80004f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004fe:	6153      	str	r3, [r2, #20]
		delay_ms(i);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff66 	bl	80003d4 <delay_ms>
		B_H1_ON;
 8000508:	4b5a      	ldr	r3, [pc, #360]	; (8000674 <main+0x234>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a59      	ldr	r2, [pc, #356]	; (8000674 <main+0x234>)
 800050e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000512:	6153      	str	r3, [r2, #20]
		B_L4_ON;
 8000514:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6153      	str	r3, [r2, #20]
		delay_ms(20-i);
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	f1c3 0314 	rsb	r3, r3, #20
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff52 	bl	80003d4 <delay_ms>
	for (i=1; i<20; i++) {
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	3301      	adds	r3, #1
 8000534:	71fb      	strb	r3, [r7, #7]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b13      	cmp	r3, #19
 800053a:	d9d3      	bls.n	80004e4 <main+0xa4>
	}
	for (i=20; i>0; i--) {
 800053c:	2314      	movs	r3, #20
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	e028      	b.n	8000594 <main+0x154>
		B_H1_OFF;
 8000542:	4b4c      	ldr	r3, [pc, #304]	; (8000674 <main+0x234>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a4b      	ldr	r2, [pc, #300]	; (8000674 <main+0x234>)
 8000548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800054c:	6153      	str	r3, [r2, #20]
		B_L4_OFF;
 800054e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800055c:	6153      	str	r3, [r2, #20]
		delay_ms(i);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff37 	bl	80003d4 <delay_ms>
		B_H1_ON;
 8000566:	4b43      	ldr	r3, [pc, #268]	; (8000674 <main+0x234>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a42      	ldr	r2, [pc, #264]	; (8000674 <main+0x234>)
 800056c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000570:	6153      	str	r3, [r2, #20]
		B_L4_ON;
 8000572:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800057c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000580:	6153      	str	r3, [r2, #20]
		delay_ms(20-i);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f1c3 0314 	rsb	r3, r3, #20
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ff23 	bl	80003d4 <delay_ms>
	for (i=20; i>0; i--) {
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	3b01      	subs	r3, #1
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1d3      	bne.n	8000542 <main+0x102>
	}
		B_H1_ON;
 800059a:	4b36      	ldr	r3, [pc, #216]	; (8000674 <main+0x234>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a35      	ldr	r2, [pc, #212]	; (8000674 <main+0x234>)
 80005a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a4:	6153      	str	r3, [r2, #20]
		B_L4_ON;
 80005a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005b4:	6153      	str	r3, [r2, #20]
	for (i=1; i<20; i++) {
 80005b6:	2301      	movs	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	e028      	b.n	800060e <main+0x1ce>
		B_H3_OFF;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <main+0x234>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a2c      	ldr	r2, [pc, #176]	; (8000674 <main+0x234>)
 80005c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005c6:	6153      	str	r3, [r2, #20]
		B_L2_OFF;
 80005c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005d6:	6153      	str	r3, [r2, #20]
		delay_ms(i);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fefa 	bl	80003d4 <delay_ms>
		B_H3_ON;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <main+0x234>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a23      	ldr	r2, [pc, #140]	; (8000674 <main+0x234>)
 80005e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ea:	6153      	str	r3, [r2, #20]
		B_L2_ON;
 80005ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fa:	6153      	str	r3, [r2, #20]
		delay_ms(20-i);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f1c3 0314 	rsb	r3, r3, #20
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fee6 	bl	80003d4 <delay_ms>
	for (i=1; i<20; i++) {
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3301      	adds	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b13      	cmp	r3, #19
 8000612:	d9d3      	bls.n	80005bc <main+0x17c>
		}
	for (i=20; i>0; i--) {
 8000614:	2314      	movs	r3, #20
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	e028      	b.n	800066c <main+0x22c>
		B_H3_OFF;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <main+0x234>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a15      	ldr	r2, [pc, #84]	; (8000674 <main+0x234>)
 8000620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000624:	6153      	str	r3, [r2, #20]
		B_L2_OFF;
 8000626:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000634:	6153      	str	r3, [r2, #20]
		delay_ms(i);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fecb 	bl	80003d4 <delay_ms>
		B_H3_ON;
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <main+0x234>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <main+0x234>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6153      	str	r3, [r2, #20]
		B_L2_ON;
 800064a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000658:	6153      	str	r3, [r2, #20]
		delay_ms(20-i);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f1c3 0314 	rsb	r3, r3, #20
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff feb7 	bl	80003d4 <delay_ms>
	for (i=20; i>0; i--) {
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	3b01      	subs	r3, #1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1d3      	bne.n	800061a <main+0x1da>
		B_H3_ON;
 8000672:	e726      	b.n	80004c2 <main+0x82>
 8000674:	48000800 	.word	0x48000800
 8000678:	48000400 	.word	0x48000400

0800067c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <SystemInit+0x20>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <SystemInit+0x20>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490e      	ldr	r1, [pc, #56]	; (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0b      	ldr	r4, [pc, #44]	; (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ca:	f7ff ffd7 	bl	800067c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ce:	f000 f811 	bl	80006f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d2:	f7ff feb5 	bl	8000440 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006e4:	0800075c 	.word	0x0800075c
  ldr r2, =_sbss
 80006e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006ec:	20000024 	.word	0x20000024

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>
	...

080006f4 <__libc_init_array>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	4e0d      	ldr	r6, [pc, #52]	; (800072c <__libc_init_array+0x38>)
 80006f8:	4c0d      	ldr	r4, [pc, #52]	; (8000730 <__libc_init_array+0x3c>)
 80006fa:	1ba4      	subs	r4, r4, r6
 80006fc:	10a4      	asrs	r4, r4, #2
 80006fe:	2500      	movs	r5, #0
 8000700:	42a5      	cmp	r5, r4
 8000702:	d109      	bne.n	8000718 <__libc_init_array+0x24>
 8000704:	4e0b      	ldr	r6, [pc, #44]	; (8000734 <__libc_init_array+0x40>)
 8000706:	4c0c      	ldr	r4, [pc, #48]	; (8000738 <__libc_init_array+0x44>)
 8000708:	f000 f818 	bl	800073c <_init>
 800070c:	1ba4      	subs	r4, r4, r6
 800070e:	10a4      	asrs	r4, r4, #2
 8000710:	2500      	movs	r5, #0
 8000712:	42a5      	cmp	r5, r4
 8000714:	d105      	bne.n	8000722 <__libc_init_array+0x2e>
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800071c:	4798      	blx	r3
 800071e:	3501      	adds	r5, #1
 8000720:	e7ee      	b.n	8000700 <__libc_init_array+0xc>
 8000722:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000726:	4798      	blx	r3
 8000728:	3501      	adds	r5, #1
 800072a:	e7f2      	b.n	8000712 <__libc_init_array+0x1e>
 800072c:	08000754 	.word	0x08000754
 8000730:	08000754 	.word	0x08000754
 8000734:	08000754 	.word	0x08000754
 8000738:	08000758 	.word	0x08000758

0800073c <_init>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	bf00      	nop
 8000740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000742:	bc08      	pop	{r3}
 8000744:	469e      	mov	lr, r3
 8000746:	4770      	bx	lr

08000748 <_fini>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	bf00      	nop
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr
