
Hyperlink_PROP_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000bb4  08000bb4  00010bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bcc  08000bcc  00010bd4  2**0
                  CONTENTS
  4 .ARM          00000000  08000bcc  08000bcc  00010bd4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bcc  08000bd4  00010bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bcc  08000bcc  00010bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000000  08000bd4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000bd4  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010bd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f88  00000000  00000000  00010c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000086c  00000000  00000000  00013b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000140  00000000  00000000  000143f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000f8  00000000  00000000  00014538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014302  00000000  00000000  00014630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b39  00000000  00000000  00028932  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006a221  00000000  00000000  0002a46b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009468c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003a4  00000000  00000000  00094708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b9c 	.word	0x08000b9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000b9c 	.word	0x08000b9c

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <CanInit>:
 */

#include "can.h"


void CanInit(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0


	CAN->MCR |= CAN_MCR_INRQ;			// Initialisation mode on
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <CanInit+0x58>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a13      	ldr	r2, [pc, #76]	; (800025c <CanInit+0x58>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6013      	str	r3, [r2, #0]

	// *** CAN Test Mode *** //
//	CAN1->BTR |= CAN_BTR_LBKM;			// Loopback mode enabled (For Debug purposes)
	// ********************* //

	NVIC_EnableIRQ(CAN_TX_IRQn);
 8000214:	2013      	movs	r0, #19
 8000216:	f7ff ffd7 	bl	80001c8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(CAN_RX0_IRQn);
 800021a:	2014      	movs	r0, #20
 800021c:	f7ff ffd4 	bl	80001c8 <__NVIC_EnableIRQ>

	CAN->IER |= CAN_IER_FMPIE0;			// FIFO message pending interrupt enable
 8000220:	4b0e      	ldr	r3, [pc, #56]	; (800025c <CanInit+0x58>)
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	4a0d      	ldr	r2, [pc, #52]	; (800025c <CanInit+0x58>)
 8000226:	f043 0302 	orr.w	r3, r3, #2
 800022a:	6153      	str	r3, [r2, #20]

	CAN->BTR = 0x00070004;				// CAN Bitrate: 2010000 (data for the logic analyser debug purposes)
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <CanInit+0x58>)
 800022e:	4a0c      	ldr	r2, [pc, #48]	; (8000260 <CanInit+0x5c>)
 8000230:	61da      	str	r2, [r3, #28]

	CAN->MCR &= ~CAN_MCR_INRQ;			// Initialisation mode off
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <CanInit+0x58>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a09      	ldr	r2, [pc, #36]	; (800025c <CanInit+0x58>)
 8000238:	f023 0301 	bic.w	r3, r3, #1
 800023c:	6013      	str	r3, [r2, #0]
	while (CAN->MSR & CAN_MCR_INRQ);
 800023e:	bf00      	nop
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <CanInit+0x58>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	f003 0301 	and.w	r3, r3, #1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d1f9      	bne.n	8000240 <CanInit+0x3c>



	CAN->MCR &= ~CAN_MCR_SLEEP;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <CanInit+0x58>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a02      	ldr	r2, [pc, #8]	; (800025c <CanInit+0x58>)
 8000252:	f023 0302 	bic.w	r3, r3, #2
 8000256:	6013      	str	r3, [r2, #0]


}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40006400 	.word	0x40006400
 8000260:	00070004 	.word	0x00070004

08000264 <Can_Rx_Msg>:
	CAN->sTxMailBox[0].TIR |=  CAN_TI0R_TXRQ;       // transmit message

}


void Can_Rx_Msg(CAN_MESSAGE * msg) {
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

	if ((CAN->sFIFOMailBox[0].RIR & CAN_ID_EXT) == 0) { // Standard ID
 800026c:	4b2e      	ldr	r3, [pc, #184]	; (8000328 <Can_Rx_Msg+0xc4>)
 800026e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->format = STANDARD_FORMAT;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
	    msg->id     = (uint32_t)0x000007FF & (CAN->sFIFOMailBox[0].RIR >> 21);
 8000278:	4b2b      	ldr	r3, [pc, #172]	; (8000328 <Can_Rx_Msg+0xc4>)
 800027a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800027e:	0d5b      	lsrs	r3, r3, #21
 8000280:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	601a      	str	r2, [r3, #0]
	  }  else  {                                          // Extended ID
	    msg->format = EXTENDED_FORMAT;
	    msg->id     = (uint32_t)0x0003FFFF & (CAN->sFIFOMailBox[0].RIR >> 3);
	  }
	                                                  // Read type information
	  if ((CAN->sFIFOMailBox[0].RIR & CAN_RTR_REMOTE) == 0) {
 8000288:	4b27      	ldr	r3, [pc, #156]	; (8000328 <Can_Rx_Msg+0xc4>)
 800028a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->type =   DATA_FRAME;                     // DATA   FRAME
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	615a      	str	r2, [r3, #20]
	  }  else  {
	    msg->type = REMOTE_FRAME;                     // REMOTE FRAME
	  }

	  msg->len = (char)0x0000000F & CAN->sFIFOMailBox[0].RDTR;
 8000294:	4b24      	ldr	r3, [pc, #144]	; (8000328 <Can_Rx_Msg+0xc4>)
 8000296:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800029a:	f003 020f 	and.w	r2, r3, #15
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	60da      	str	r2, [r3, #12]
	                                                    // Read data
	  msg->data[0] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR);
 80002a2:	4b21      	ldr	r3, [pc, #132]	; (8000328 <Can_Rx_Msg+0xc4>)
 80002a4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	711a      	strb	r2, [r3, #4]
	  msg->data[1] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR >> 8);
 80002ae:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <Can_Rx_Msg+0xc4>)
 80002b0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	715a      	strb	r2, [r3, #5]
	  msg->data[2] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR >> 16);
 80002bc:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <Can_Rx_Msg+0xc4>)
 80002be:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80002c2:	0c1b      	lsrs	r3, r3, #16
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	719a      	strb	r2, [r3, #6]
	  msg->data[3] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR >> 24);
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <Can_Rx_Msg+0xc4>)
 80002cc:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80002d0:	0e1b      	lsrs	r3, r3, #24
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	71da      	strb	r2, [r3, #7]

	  msg->data[4] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR);
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <Can_Rx_Msg+0xc4>)
 80002da:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	721a      	strb	r2, [r3, #8]
	  msg->data[5] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR >> 8);
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <Can_Rx_Msg+0xc4>)
 80002e6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80002ea:	0a1b      	lsrs	r3, r3, #8
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	725a      	strb	r2, [r3, #9]
	  msg->data[6] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR >> 16);
 80002f2:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <Can_Rx_Msg+0xc4>)
 80002f4:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80002f8:	0c1b      	lsrs	r3, r3, #16
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	729a      	strb	r2, [r3, #10]
	  msg->data[7] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR >> 24);
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <Can_Rx_Msg+0xc4>)
 8000302:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000306:	0e1b      	lsrs	r3, r3, #24
 8000308:	b2da      	uxtb	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	72da      	strb	r2, [r3, #11]

	  CAN->RF0R |= CAN_RF0R_RFOM0;                    // Release FIFO 0 output mailbox
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <Can_Rx_Msg+0xc4>)
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	4a05      	ldr	r2, [pc, #20]	; (8000328 <Can_Rx_Msg+0xc4>)
 8000314:	f043 0320 	orr.w	r3, r3, #32
 8000318:	60d3      	str	r3, [r2, #12]

}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40006400 	.word	0x40006400

0800032c <Can_Set_Filter>:


void Can_Set_Filter(uint id, char format) {
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]

	static unsigned short CAN_filterIdx = 0;
	uint CAN_msgId = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]

	  if (CAN_filterIdx > 13) {                       // check if Filter Memory is full
 800033c:	4b3f      	ldr	r3, [pc, #252]	; (800043c <Can_Set_Filter+0x110>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	2b0d      	cmp	r3, #13
 8000342:	d874      	bhi.n	800042e <Can_Set_Filter+0x102>
	    return;
	  }
	                                                  // Setup identifier information
	  if (format == STANDARD_FORMAT)  {               // Standard ID
 8000344:	78fb      	ldrb	r3, [r7, #3]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d105      	bne.n	8000356 <Can_Set_Filter+0x2a>
	      CAN_msgId  |= (unsigned int)(id << 21) | CAN_ID_STD;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	055b      	lsls	r3, r3, #21
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	4313      	orrs	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e004      	b.n	8000360 <Can_Set_Filter+0x34>
	  }  else  {                                      // Extended ID
	      CAN_msgId  |= (unsigned int)(id <<  3) | CAN_ID_EXT;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	00db      	lsls	r3, r3, #3
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	4313      	orrs	r3, r2
 800035e:	60fb      	str	r3, [r7, #12]
	  }

	  CAN->FMR  |=  CAN_FMR_FINIT;                    // set Initialisation mode for filter banks
 8000360:	4b37      	ldr	r3, [pc, #220]	; (8000440 <Can_Set_Filter+0x114>)
 8000362:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000366:	4a36      	ldr	r2, [pc, #216]	; (8000440 <Can_Set_Filter+0x114>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	  CAN->FA1R &=  ~(unsigned int)(1 << CAN_filterIdx); // deactivate filter
 8000370:	4b33      	ldr	r3, [pc, #204]	; (8000440 <Can_Set_Filter+0x114>)
 8000372:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000376:	4b31      	ldr	r3, [pc, #196]	; (800043c <Can_Set_Filter+0x110>)
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	4619      	mov	r1, r3
 800037c:	2301      	movs	r3, #1
 800037e:	408b      	lsls	r3, r1
 8000380:	43db      	mvns	r3, r3
 8000382:	492f      	ldr	r1, [pc, #188]	; (8000440 <Can_Set_Filter+0x114>)
 8000384:	4013      	ands	r3, r2
 8000386:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	                                                  // initialize filter
	  CAN->FS1R |= (unsigned int)(1 << CAN_filterIdx);// set 32-bit scale configuration
 800038a:	4b2d      	ldr	r3, [pc, #180]	; (8000440 <Can_Set_Filter+0x114>)
 800038c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000390:	4a2a      	ldr	r2, [pc, #168]	; (800043c <Can_Set_Filter+0x110>)
 8000392:	8812      	ldrh	r2, [r2, #0]
 8000394:	4611      	mov	r1, r2
 8000396:	2201      	movs	r2, #1
 8000398:	408a      	lsls	r2, r1
 800039a:	4611      	mov	r1, r2
 800039c:	4a28      	ldr	r2, [pc, #160]	; (8000440 <Can_Set_Filter+0x114>)
 800039e:	430b      	orrs	r3, r1
 80003a0:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	  CAN->FM1R |= (unsigned int)(1 << CAN_filterIdx);// set 2 32-bit identifier list mode
 80003a4:	4b26      	ldr	r3, [pc, #152]	; (8000440 <Can_Set_Filter+0x114>)
 80003a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80003aa:	4a24      	ldr	r2, [pc, #144]	; (800043c <Can_Set_Filter+0x110>)
 80003ac:	8812      	ldrh	r2, [r2, #0]
 80003ae:	4611      	mov	r1, r2
 80003b0:	2201      	movs	r2, #1
 80003b2:	408a      	lsls	r2, r1
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a22      	ldr	r2, [pc, #136]	; (8000440 <Can_Set_Filter+0x114>)
 80003b8:	430b      	orrs	r3, r1
 80003ba:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	  CAN->sFilterRegister[CAN_filterIdx].FR1 = CAN_msgId; //  32-bit identifier
 80003be:	4920      	ldr	r1, [pc, #128]	; (8000440 <Can_Set_Filter+0x114>)
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <Can_Set_Filter+0x110>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	3348      	adds	r3, #72	; 0x48
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	  CAN->sFilterRegister[CAN_filterIdx].FR2 = CAN_msgId; //  32-bit identifier
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <Can_Set_Filter+0x114>)
 80003ce:	4b1b      	ldr	r3, [pc, #108]	; (800043c <Can_Set_Filter+0x110>)
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	3348      	adds	r3, #72	; 0x48
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4413      	add	r3, r2
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	605a      	str	r2, [r3, #4]

	  CAN->FFA1R &= ~(unsigned int)(1 << CAN_filterIdx);  // assign filter to FIFO 0
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <Can_Set_Filter+0x114>)
 80003de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80003e2:	4b16      	ldr	r3, [pc, #88]	; (800043c <Can_Set_Filter+0x110>)
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	4619      	mov	r1, r3
 80003e8:	2301      	movs	r3, #1
 80003ea:	408b      	lsls	r3, r1
 80003ec:	43db      	mvns	r3, r3
 80003ee:	4914      	ldr	r1, [pc, #80]	; (8000440 <Can_Set_Filter+0x114>)
 80003f0:	4013      	ands	r3, r2
 80003f2:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
	  CAN->FA1R  |=  (unsigned int)(1 << CAN_filterIdx);  // activate filter
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <Can_Set_Filter+0x114>)
 80003f8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80003fc:	4a0f      	ldr	r2, [pc, #60]	; (800043c <Can_Set_Filter+0x110>)
 80003fe:	8812      	ldrh	r2, [r2, #0]
 8000400:	4611      	mov	r1, r2
 8000402:	2201      	movs	r2, #1
 8000404:	408a      	lsls	r2, r1
 8000406:	4611      	mov	r1, r2
 8000408:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <Can_Set_Filter+0x114>)
 800040a:	430b      	orrs	r3, r1
 800040c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	  CAN->FMR &= ~CAN_FMR_FINIT;                     // reset Initialisation mode for filter banks
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <Can_Set_Filter+0x114>)
 8000412:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <Can_Set_Filter+0x114>)
 8000418:	f023 0301 	bic.w	r3, r3, #1
 800041c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	  CAN_filterIdx += 1;                             // increase filter index
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <Can_Set_Filter+0x110>)
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	b29a      	uxth	r2, r3
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <Can_Set_Filter+0x110>)
 800042a:	801a      	strh	r2, [r3, #0]
 800042c:	e000      	b.n	8000430 <Can_Set_Filter+0x104>
	    return;
 800042e:	bf00      	nop

}
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	2000001c 	.word	0x2000001c
 8000440:	40006400 	.word	0x40006400

08000444 <CAN_TX_IRQHandler>:


__attribute__((interrupt)) void CAN_TX_IRQHandler (void)  {
 8000444:	4668      	mov	r0, sp
 8000446:	f020 0107 	bic.w	r1, r0, #7
 800044a:	468d      	mov	sp, r1
 800044c:	b481      	push	{r0, r7}
 800044e:	af00      	add	r7, sp, #0
	if (CAN->TSR & CAN_TSR_RQCP0) {                 // request completed mbx 0
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <CAN_TX_IRQHandler+0x3c>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	2b00      	cmp	r3, #0
 800045a:	d00b      	beq.n	8000474 <CAN_TX_IRQHandler+0x30>
	    CAN->TSR |= CAN_TSR_RQCP0;                  // reset request complete mbx 0
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <CAN_TX_IRQHandler+0x3c>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	4a07      	ldr	r2, [pc, #28]	; (8000480 <CAN_TX_IRQHandler+0x3c>)
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6093      	str	r3, [r2, #8]
	    CAN->IER &= ~CAN_IER_TMEIE;                 // disable  TME interrupt
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <CAN_TX_IRQHandler+0x3c>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <CAN_TX_IRQHandler+0x3c>)
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	6153      	str	r3, [r2, #20]
	}

	// Tx Interrupt Action (insert relevant code if needed)

}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc81      	pop	{r0, r7}
 800047a:	4685      	mov	sp, r0
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40006400 	.word	0x40006400

08000484 <CAN_RX0_IRQHandler>:



__attribute__((interrupt)) void CAN_RX0_IRQHandler (void) {
 8000484:	4668      	mov	r0, sp
 8000486:	f020 0107 	bic.w	r1, r0, #7
 800048a:	468d      	mov	sp, r1
 800048c:	b589      	push	{r0, r3, r7, lr}
 800048e:	af00      	add	r7, sp, #0

	if (CAN->RF0R & CAN_RF0R_FMP0) {			      // message pending ?
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <CAN_RX0_IRQHandler+0x2c>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	f003 0303 	and.w	r3, r3, #3
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <CAN_RX0_IRQHandler+0x1e>
		Can_Rx_Msg(&can_rx_message);                  // read the message
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <CAN_RX0_IRQHandler+0x30>)
 800049e:	f7ff fee1 	bl	8000264 <Can_Rx_Msg>
	}

}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 80004aa:	4685      	mov	sp, r0
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40006400 	.word	0x40006400
 80004b4:	20000020 	.word	0x20000020

080004b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	db0a      	blt.n	80004e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	490c      	ldr	r1, [pc, #48]	; (8000504 <__NVIC_SetPriority+0x4c>)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	0112      	lsls	r2, r2, #4
 80004d8:	b2d2      	uxtb	r2, r2
 80004da:	440b      	add	r3, r1
 80004dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004e0:	e00a      	b.n	80004f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4908      	ldr	r1, [pc, #32]	; (8000508 <__NVIC_SetPriority+0x50>)
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	f003 030f 	and.w	r3, r3, #15
 80004ee:	3b04      	subs	r3, #4
 80004f0:	0112      	lsls	r2, r2, #4
 80004f2:	b2d2      	uxtb	r2, r2
 80004f4:	440b      	add	r3, r1
 80004f6:	761a      	strb	r2, [r3, #24]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	e000e100 	.word	0xe000e100
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3b01      	subs	r3, #1
 8000518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800051c:	d301      	bcc.n	8000522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800051e:	2301      	movs	r3, #1
 8000520:	e00f      	b.n	8000542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <SysTick_Config+0x40>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3b01      	subs	r3, #1
 8000528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800052a:	210f      	movs	r1, #15
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
 8000530:	f7ff ffc2 	bl	80004b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <SysTick_Config+0x40>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <SysTick_Config+0x40>)
 800053c:	2207      	movs	r2, #7
 800053e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	e000e010 	.word	0xe000e010

08000550 <SystemCFG>:
 *      Author: Michal Makowka
 */
#include "config.h"


void SystemCFG (void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	 * =64 000 000 / 10 000Hz desired
	 * PSC = 639 | ARR = 9
	 */

	// System CLK 36MHz
	RCC->CFGR |= RCC_CFGR_PLLMUL9;
 8000554:	4b5d      	ldr	r3, [pc, #372]	; (80006cc <SystemCFG+0x17c>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	4a5c      	ldr	r2, [pc, #368]	; (80006cc <SystemCFG+0x17c>)
 800055a:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800055e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_DIV2;
 8000560:	4b5a      	ldr	r3, [pc, #360]	; (80006cc <SystemCFG+0x17c>)
 8000562:	4a5a      	ldr	r2, [pc, #360]	; (80006cc <SystemCFG+0x17c>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000568:	4b58      	ldr	r3, [pc, #352]	; (80006cc <SystemCFG+0x17c>)
 800056a:	4a58      	ldr	r2, [pc, #352]	; (80006cc <SystemCFG+0x17c>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8000570:	4b56      	ldr	r3, [pc, #344]	; (80006cc <SystemCFG+0x17c>)
 8000572:	4a56      	ldr	r2, [pc, #344]	; (80006cc <SystemCFG+0x17c>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000578:	4b54      	ldr	r3, [pc, #336]	; (80006cc <SystemCFG+0x17c>)
 800057a:	4a54      	ldr	r2, [pc, #336]	; (80006cc <SystemCFG+0x17c>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000580:	4b52      	ldr	r3, [pc, #328]	; (80006cc <SystemCFG+0x17c>)
 8000582:	4a52      	ldr	r2, [pc, #328]	; (80006cc <SystemCFG+0x17c>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000588:	4b50      	ldr	r3, [pc, #320]	; (80006cc <SystemCFG+0x17c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a4f      	ldr	r2, [pc, #316]	; (80006cc <SystemCFG+0x17c>)
 800058e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000592:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 8000594:	4b4e      	ldr	r3, [pc, #312]	; (80006d0 <SystemCFG+0x180>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a4d      	ldr	r2, [pc, #308]	; (80006d0 <SystemCFG+0x180>)
 800059a:	f043 0302 	orr.w	r3, r3, #2
 800059e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 80005a0:	bf00      	nop
 80005a2:	4b4a      	ldr	r3, [pc, #296]	; (80006cc <SystemCFG+0x17c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <SystemCFG+0x52>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005ae:	4b47      	ldr	r3, [pc, #284]	; (80006cc <SystemCFG+0x17c>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4a46      	ldr	r2, [pc, #280]	; (80006cc <SystemCFG+0x17c>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	6053      	str	r3, [r2, #4]
	while ( (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80005ba:	bf00      	nop
 80005bc:	4b43      	ldr	r3, [pc, #268]	; (80006cc <SystemCFG+0x17c>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	f003 030c 	and.w	r3, r3, #12
 80005c4:	2b08      	cmp	r3, #8
 80005c6:	d1f9      	bne.n	80005bc <SystemCFG+0x6c>




	// RCC clock EN configuration
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN;	// GPIO Clk Enable
 80005c8:	4b40      	ldr	r3, [pc, #256]	; (80006cc <SystemCFG+0x17c>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a3f      	ldr	r2, [pc, #252]	; (80006cc <SystemCFG+0x17c>)
 80005ce:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80005d2:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_CANEN;												// CAN Clk Enable
 80005d4:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <SystemCFG+0x17c>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	4a3c      	ldr	r2, [pc, #240]	; (80006cc <SystemCFG+0x17c>)
 80005da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005de:	61d3      	str	r3, [r2, #28]

	// Status LEDs GPIO config
	GPIOC->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0;	// GPIO Output mode
 80005e0:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <SystemCFG+0x184>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a3b      	ldr	r2, [pc, #236]	; (80006d4 <SystemCFG+0x184>)
 80005e6:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80005ea:	6013      	str	r3, [r2, #0]

	// LIM1 Pinout
	// Pins as output
	GPIOA->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER15_0;
 80005ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005fa:	f043 0315 	orr.w	r3, r3, #21
 80005fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER0_1 | GPIO_MODER_MODER1_1 | GPIO_MODER_MODER2_1 | GPIO_MODER_MODER15_1);
 8000600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800060e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000612:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER3_0 | GPIO_MODER_MODER10_0 | GPIO_MODER_MODER11_0 | GPIO_MODER_MODER13_0;
 8000614:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <SystemCFG+0x188>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a2f      	ldr	r2, [pc, #188]	; (80006d8 <SystemCFG+0x188>)
 800061a:	f043 638a 	orr.w	r3, r3, #72351744	; 0x4500000
 800061e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000622:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER3_1 | GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1 | GPIO_MODER_MODER13_1);
 8000624:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <SystemCFG+0x188>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <SystemCFG+0x188>)
 800062a:	f023 630a 	bic.w	r3, r3, #144703488	; 0x8a00000
 800062e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000632:	6013      	str	r3, [r2, #0]
	// Fault Pin
	GPIOB->MODER &= ~(GPIO_MODER_MODER12_0 | GPIO_MODER_MODER12_1);		// Input
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemCFG+0x188>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemCFG+0x188>)
 800063a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800063e:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR12_0;	// Pull-Up
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemCFG+0x188>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <SystemCFG+0x188>)
 8000646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800064a:	60d3      	str	r3, [r2, #12]

	// LIM2 Pinout
	// Pins as output
	GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0 | GPIO_MODER_MODER8_0;
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <SystemCFG+0x184>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a20      	ldr	r2, [pc, #128]	; (80006d4 <SystemCFG+0x184>)
 8000652:	f443 33a8 	orr.w	r3, r3, #86016	; 0x15000
 8000656:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1 | GPIO_MODER_MODER8_1);
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <SystemCFG+0x184>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1d      	ldr	r2, [pc, #116]	; (80006d4 <SystemCFG+0x184>)
 800065e:	f423 3328 	bic.w	r3, r3, #172032	; 0x2a000
 8000662:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0 | GPIO_MODER_MODER10_0;
 8000664:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800066e:	f443 13a8 	orr.w	r3, r3, #1376256	; 0x150000
 8000672:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1 | GPIO_MODER_MODER10_1);
 8000674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800067e:	f423 1328 	bic.w	r3, r3, #2752512	; 0x2a0000
 8000682:	6013      	str	r3, [r2, #0]
	// Fault Pin
	GPIOB->MODER &= ~(GPIO_MODER_MODER14_0 | GPIO_MODER_MODER14_1);		// Input
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemCFG+0x188>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <SystemCFG+0x188>)
 800068a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800068e:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR14_0;	// Pull-Up
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <SystemCFG+0x188>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <SystemCFG+0x188>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	60d3      	str	r3, [r2, #12]

	// CAN GPIO Pins
	// CAN bus GPIO config
	GPIOB->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1;	// GPIO PB8 and PB9 Alternative Mode (CANbx)
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <SystemCFG+0x188>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <SystemCFG+0x188>)
 80006a2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80006a6:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= (0b1001 << 0) | (0b1001 << 4);	// PB8 and PB9 AF set to CAN_Tx and CAN_Rx
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <SystemCFG+0x188>)
 80006aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <SystemCFG+0x188>)
 80006ae:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 80006b2:	6253      	str	r3, [r2, #36]	; 0x24

	SysTick_Config(3600000000/100000);
 80006b4:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80006b8:	f7ff ff28 	bl	800050c <SysTick_Config>
	// Reset the SysTick counter value.
	SysTick->VAL = 0UL;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <SystemCFG+0x18c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
	// Set SysTick source and IRQ.
	SysTick->CTRL = (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk);
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <SystemCFG+0x18c>)
 80006c4:	2206      	movs	r2, #6
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40022000 	.word	0x40022000
 80006d4:	48000800 	.word	0x48000800
 80006d8:	48000400 	.word	0x48000400
 80006dc:	e000e010 	.word	0xe000e010

080006e0 <delay_ms>:

void delay_ms(int ms) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	// Enable the SysTick timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <delay_ms+0x40>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <delay_ms+0x40>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

	// Wait for a specified number of milliseconds
	delay = 0;
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <delay_ms+0x44>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	while (delay < ms);
 80006fa:	bf00      	nop
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <delay_ms+0x44>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	429a      	cmp	r2, r3
 8000704:	dcfa      	bgt.n	80006fc <delay_ms+0x1c>

	// Disable the SysTick timer
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <delay_ms+0x40>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <delay_ms+0x40>)
 800070c:	f023 0301 	bic.w	r3, r3, #1
 8000710:	6013      	str	r3, [r2, #0]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000e010 	.word	0xe000e010
 8000724:	2000003c 	.word	0x2000003c

08000728 <SysTick_Handler>:
}

 */


__attribute__((interrupt)) void SysTick_Handler(void){
 8000728:	4668      	mov	r0, sp
 800072a:	f020 0107 	bic.w	r1, r0, #7
 800072e:	468d      	mov	sp, r1
 8000730:	b481      	push	{r0, r7}
 8000732:	af00      	add	r7, sp, #0
	delay++;
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Handler+0x20>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a03      	ldr	r2, [pc, #12]	; (8000748 <SysTick_Handler+0x20>)
 800073c:	6013      	str	r3, [r2, #0]
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc81      	pop	{r0, r7}
 8000744:	4685      	mov	sp, r0
 8000746:	4770      	bx	lr
 8000748:	2000003c 	.word	0x2000003c

0800074c <VA_H>:
#include "stm32f303x8.h"
#include "config.h"
#include "can.h"


void VA_H (void) {B_H1_OFF; B_L2_ON;}
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <VA_H+0x2c>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	4a08      	ldr	r2, [pc, #32]	; (8000778 <VA_H+0x2c>)
 8000756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800075a:	6153      	str	r3, [r2, #20]
 800075c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800076a:	6153      	str	r3, [r2, #20]
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	48000800 	.word	0x48000800

0800077c <VA_L>:
void VA_L (void) {B_H1_ON; B_L2_OFF;}
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <VA_L+0x2c>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <VA_L+0x2c>)
 8000786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078a:	6153      	str	r3, [r2, #20]
 800078c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800079a:	6153      	str	r3, [r2, #20]
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	48000800 	.word	0x48000800

080007ac <VB_H>:
void VB_H (void) {B_H3_OFF; B_L4_ON;}
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <VB_H+0x2c>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <VB_H+0x2c>)
 80007b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007ba:	6153      	str	r3, [r2, #20]
 80007bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ca:	6153      	str	r3, [r2, #20]
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	48000800 	.word	0x48000800

080007dc <VB_L>:
void VB_L (void) {B_H3_ON; B_L4_OFF;}
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <VB_L+0x2c>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a08      	ldr	r2, [pc, #32]	; (8000808 <VB_L+0x2c>)
 80007e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ea:	6153      	str	r3, [r2, #20]
 80007ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007fa:	6153      	str	r3, [r2, #20]
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	48000800 	.word	0x48000800

0800080c <VC_H>:
void VC_H (void) {B_H5_OFF; B_L6_ON;}
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <VC_H+0x2c>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <VC_H+0x2c>)
 8000816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800081a:	6153      	str	r3, [r2, #20]
 800081c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800082a:	6153      	str	r3, [r2, #20]
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	48000800 	.word	0x48000800

0800083c <VC_L>:
void VC_L (void) {B_H5_ON; B_L6_OFF;}
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <VC_L+0x2c>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	4a08      	ldr	r2, [pc, #32]	; (8000868 <VC_L+0x2c>)
 8000846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800084a:	6153      	str	r3, [r2, #20]
 800084c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800085a:	6153      	str	r3, [r2, #20]
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	48000800 	.word	0x48000800

0800086c <main>:

void PhaseExec(uint8_t val);

void Sine_xTOx(void(*A)(void), void(*B)(void), uint8_t T_100, uint8_t T_93_3, uint8_t T_75, uint8_t T_50);

int main(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b092      	sub	sp, #72	; 0x48
 8000870:	af00      	add	r7, sp, #0

		CAN_MESSAGE can_status_ok;

		strcpy(can_status_ok.data, "pr_0000");
 8000872:	4a3c      	ldr	r2, [pc, #240]	; (8000964 <main+0xf8>)
 8000874:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800087c:	e883 0003 	stmia.w	r3, {r0, r1}
			can_status_ok.format = STANDARD_FORMAT;
 8000880:	2300      	movs	r3, #0
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
			can_status_ok.id = 0x01;
 8000884:	2301      	movs	r3, #1
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
			can_status_ok.len = sizeof(can_status_ok.data);
 8000888:	2308      	movs	r3, #8
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
			can_status_ok.type = DATA_FRAME;
 800088c:	2300      	movs	r3, #0
 800088e:	647b      	str	r3, [r7, #68]	; 0x44

		CAN_MESSAGE can_status_fault;
			strcpy(can_status_fault.data, "pr_1111");
 8000890:	4a35      	ldr	r2, [pc, #212]	; (8000968 <main+0xfc>)
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089a:	e883 0003 	stmia.w	r3, {r0, r1}
			can_status_fault.format = STANDARD_FORMAT;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
			can_status_fault.id = 0x01;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
			can_status_fault.len = sizeof(can_status_fault.data);
 80008a6:	2308      	movs	r3, #8
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
			can_status_fault.type = DATA_FRAME;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		CAN_MESSAGE can_ack;
			strcpy(can_ack.data, "pr_p_xx");
 80008ae:	4a2f      	ldr	r2, [pc, #188]	; (800096c <main+0x100>)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b6:	e883 0003 	stmia.w	r3, {r0, r1}
			can_ack.format = STANDARD_FORMAT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
			can_ack.id = 0x01;
 80008be:	2301      	movs	r3, #1
 80008c0:	603b      	str	r3, [r7, #0]
			can_ack.len = sizeof(can_ack.data);
 80008c2:	2308      	movs	r3, #8
 80008c4:	60fb      	str	r3, [r7, #12]
			can_ack.type = DATA_FRAME;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]



	SystemCFG();
 80008ca:	f7ff fe41 	bl	8000550 <SystemCFG>

	GPIOC->ODR |= GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_2 | GPIO_ODR_3;	// Clear LEDs
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <main+0x104>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a27      	ldr	r2, [pc, #156]	; (8000970 <main+0x104>)
 80008d4:	f043 030f 	orr.w	r3, r3, #15
 80008d8:	6153      	str	r3, [r2, #20]
	// Clear

	CanInit();
 80008da:	f7ff fc93 	bl	8000204 <CanInit>

	Can_Set_Filter(0x00, STANDARD_FORMAT);
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fd23 	bl	800032c <Can_Set_Filter>
	Can_Set_Filter(0x03, STANDARD_FORMAT);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2003      	movs	r0, #3
 80008ea:	f7ff fd1f 	bl	800032c <Can_Set_Filter>


	GPIOB->ODR |= GPIO_ODR_11;		// STDrive Enable
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <main+0x108>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a20      	ldr	r2, [pc, #128]	; (8000974 <main+0x108>)
 80008f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008f8:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= GPIO_ODR_13;		// STDrive Enable
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <main+0x108>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <main+0x108>)
 8000900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000904:	6153      	str	r3, [r2, #20]

	B_H1_OFF;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <main+0x104>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a19      	ldr	r2, [pc, #100]	; (8000970 <main+0x104>)
 800090c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000910:	6153      	str	r3, [r2, #20]
	B_L2_OFF;
 8000912:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800091c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000920:	6153      	str	r3, [r2, #20]
	B_H3_OFF;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <main+0x104>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <main+0x104>)
 8000928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800092c:	6153      	str	r3, [r2, #20]
	B_L4_OFF;
 800092e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800093c:	6153      	str	r3, [r2, #20]
	B_H5_OFF;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <main+0x104>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <main+0x104>)
 8000944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000948:	6153      	str	r3, [r2, #20]
	B_L6_OFF;
 800094a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000958:	6153      	str	r3, [r2, #20]
		else {

		}
*/
		// Testing value
		PhaseExec(20);
 800095a:	2014      	movs	r0, #20
 800095c:	f000 f80c 	bl	8000978 <PhaseExec>
 8000960:	e7fb      	b.n	800095a <main+0xee>
 8000962:	bf00      	nop
 8000964:	08000bb4 	.word	0x08000bb4
 8000968:	08000bbc 	.word	0x08000bbc
 800096c:	08000bc4 	.word	0x08000bc4
 8000970:	48000800 	.word	0x48000800
 8000974:	48000400 	.word	0x48000400

08000978 <PhaseExec>:
	}
}


void PhaseExec(uint8_t val) {	// Default val = 20
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

		// *** 3-Phase H-Bridge Driving Circuit Sequence with SoftPWM *** //
		// S6 - 101 TO S1 - 001
		// V_c constant HI AND V_b constant LOW
		VC_H();
 8000982:	f7ff ff43 	bl	800080c <VC_H>
		VB_L();
 8000986:	f7ff ff29 	bl	80007dc <VB_L>
	for (i=0; i<val; i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	73fb      	strb	r3, [r7, #15]
 800098e:	e010      	b.n	80009b2 <PhaseExec+0x3a>
		// V_a HI -> to LOW
		VA_L();
 8000990:	f7ff fef4 	bl	800077c <VA_L>
		delay_ms(i);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fea2 	bl	80006e0 <delay_ms>
		VA_H();
 800099c:	f7ff fed6 	bl	800074c <VA_H>
		delay_ms(val-i);
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe9a 	bl	80006e0 <delay_ms>
	for (i=0; i<val; i++) {
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	3301      	adds	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	7bfa      	ldrb	r2, [r7, #15]
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3ea      	bcc.n	8000990 <PhaseExec+0x18>
	}
//		Sine_xTOx(VA_H, VA_L, 10, 9, 7, 5);

		// S1 - 001 TO S2 - 011
		// V_a constant LOW AND V_c constant HI
		VA_L();
 80009ba:	f7ff fedf 	bl	800077c <VA_L>
		VC_H();
 80009be:	f7ff ff25 	bl	800080c <VC_H>
	for (i=0; i<val; i++) {
 80009c2:	2300      	movs	r3, #0
 80009c4:	73fb      	strb	r3, [r7, #15]
 80009c6:	e010      	b.n	80009ea <PhaseExec+0x72>
		// V_b LOW -> to HI
		VB_H();
 80009c8:	f7ff fef0 	bl	80007ac <VB_H>
		delay_ms(i);
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe86 	bl	80006e0 <delay_ms>
		VB_L();
 80009d4:	f7ff ff02 	bl	80007dc <VB_L>
		delay_ms(val-i);
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fe7e 	bl	80006e0 <delay_ms>
	for (i=0; i<val; i++) {
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	3301      	adds	r3, #1
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	7bfa      	ldrb	r2, [r7, #15]
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d3ea      	bcc.n	80009c8 <PhaseExec+0x50>
	}
//		Sine_xTOx(VB_L, VB_H, 10, 9, 7, 5);

		// S2 - 011 TO S3 - 010
		// V_a constant LOW AND V_b constant HI
		VA_L();
 80009f2:	f7ff fec3 	bl	800077c <VA_L>
		VB_H();
 80009f6:	f7ff fed9 	bl	80007ac <VB_H>
	for (i=0; i<val; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	e010      	b.n	8000a22 <PhaseExec+0xaa>
		// V_c HI -> to LOW
		VC_L();
 8000a00:	f7ff ff1c 	bl	800083c <VC_L>
		delay_ms(i);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe6a 	bl	80006e0 <delay_ms>
		VC_H();
 8000a0c:	f7ff fefe 	bl	800080c <VC_H>
		delay_ms(val-i);
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe62 	bl	80006e0 <delay_ms>
	for (i=0; i<val; i++) {
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	73fb      	strb	r3, [r7, #15]
 8000a22:	7bfa      	ldrb	r2, [r7, #15]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d3ea      	bcc.n	8000a00 <PhaseExec+0x88>
	}
//		Sine_xTOx(VC_H, VC_L, 10, 9, 7, 5);

		// S3 - 010 TO S4 - 110
		// V_b constant HI AND V_c constant LOW
		VB_H();
 8000a2a:	f7ff febf 	bl	80007ac <VB_H>
		VC_L();
 8000a2e:	f7ff ff05 	bl	800083c <VC_L>
	for (i=0; i<val; i++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	e010      	b.n	8000a5a <PhaseExec+0xe2>
		// V_a LOW -> to HI
		VA_H();
 8000a38:	f7ff fe88 	bl	800074c <VA_H>
		delay_ms(i);
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fe4e 	bl	80006e0 <delay_ms>
		VA_L();
 8000a44:	f7ff fe9a 	bl	800077c <VA_L>
		delay_ms(val-i);
 8000a48:	79fa      	ldrb	r2, [r7, #7]
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fe46 	bl	80006e0 <delay_ms>
	for (i=0; i<val; i++) {
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	3301      	adds	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	7bfa      	ldrb	r2, [r7, #15]
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d3ea      	bcc.n	8000a38 <PhaseExec+0xc0>
	}
//		Sine_xTOx(VA_L, VA_H, 10, 9, 7, 5);
		// S4 - 110 TO S5 - 100
		// V_a constant HI AND V_c constant LOW
		VA_H();
 8000a62:	f7ff fe73 	bl	800074c <VA_H>
		VC_L();
 8000a66:	f7ff fee9 	bl	800083c <VC_L>
	for (i=0; i<val; i++) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	e010      	b.n	8000a92 <PhaseExec+0x11a>
		// V_b HI -> to LOW
		VB_L();
 8000a70:	f7ff feb4 	bl	80007dc <VB_L>
		delay_ms(i);
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fe32 	bl	80006e0 <delay_ms>
		VB_H();
 8000a7c:	f7ff fe96 	bl	80007ac <VB_H>
		delay_ms(val-i);
 8000a80:	79fa      	ldrb	r2, [r7, #7]
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fe2a 	bl	80006e0 <delay_ms>
	for (i=0; i<val; i++) {
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	7bfa      	ldrb	r2, [r7, #15]
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d3ea      	bcc.n	8000a70 <PhaseExec+0xf8>
	}
//		Sine_xTOx(VB_H, VB_L, 10, 9, 7, 5);

		// S5 - 100 TO S6 - 101
		// V_a constant HI AND V_b constant LOW
		VA_H();
 8000a9a:	f7ff fe57 	bl	800074c <VA_H>
		VB_L();
 8000a9e:	f7ff fe9d 	bl	80007dc <VB_L>
	for (i=0; i<val; i++) {
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e010      	b.n	8000aca <PhaseExec+0x152>
		// V_c LOW -> to H
		VC_H();
 8000aa8:	f7ff feb0 	bl	800080c <VC_H>
		delay_ms(i);
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fe16 	bl	80006e0 <delay_ms>
		VC_L();
 8000ab4:	f7ff fec2 	bl	800083c <VC_L>
		delay_ms(val-i);
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fe0e 	bl	80006e0 <delay_ms>
	for (i=0; i<val; i++) {
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	7bfa      	ldrb	r2, [r7, #15]
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d3ea      	bcc.n	8000aa8 <PhaseExec+0x130>
	}
//		Sine_xTOx(VC_L, VC_H, 10, 9, 7, 5);

}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490e      	ldr	r1, [pc, #56]	; (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0b      	ldr	r4, [pc, #44]	; (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2a:	f7ff ffd7 	bl	8000adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f000 f811 	bl	8000b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fe9b 	bl	800086c <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b38:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b44:	08000bd4 	.word	0x08000bd4
  ldr r2, =_sbss
 8000b48:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b4c:	20000040 	.word	0x20000040

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <__libc_init_array>:
 8000b54:	b570      	push	{r4, r5, r6, lr}
 8000b56:	4e0d      	ldr	r6, [pc, #52]	; (8000b8c <__libc_init_array+0x38>)
 8000b58:	4c0d      	ldr	r4, [pc, #52]	; (8000b90 <__libc_init_array+0x3c>)
 8000b5a:	1ba4      	subs	r4, r4, r6
 8000b5c:	10a4      	asrs	r4, r4, #2
 8000b5e:	2500      	movs	r5, #0
 8000b60:	42a5      	cmp	r5, r4
 8000b62:	d109      	bne.n	8000b78 <__libc_init_array+0x24>
 8000b64:	4e0b      	ldr	r6, [pc, #44]	; (8000b94 <__libc_init_array+0x40>)
 8000b66:	4c0c      	ldr	r4, [pc, #48]	; (8000b98 <__libc_init_array+0x44>)
 8000b68:	f000 f818 	bl	8000b9c <_init>
 8000b6c:	1ba4      	subs	r4, r4, r6
 8000b6e:	10a4      	asrs	r4, r4, #2
 8000b70:	2500      	movs	r5, #0
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	d105      	bne.n	8000b82 <__libc_init_array+0x2e>
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
 8000b78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b7c:	4798      	blx	r3
 8000b7e:	3501      	adds	r5, #1
 8000b80:	e7ee      	b.n	8000b60 <__libc_init_array+0xc>
 8000b82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b86:	4798      	blx	r3
 8000b88:	3501      	adds	r5, #1
 8000b8a:	e7f2      	b.n	8000b72 <__libc_init_array+0x1e>
 8000b8c:	08000bcc 	.word	0x08000bcc
 8000b90:	08000bcc 	.word	0x08000bcc
 8000b94:	08000bcc 	.word	0x08000bcc
 8000b98:	08000bd0 	.word	0x08000bd0

08000b9c <_init>:
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9e:	bf00      	nop
 8000ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba2:	bc08      	pop	{r3}
 8000ba4:	469e      	mov	lr, r3
 8000ba6:	4770      	bx	lr

08000ba8 <_fini>:
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000baa:	bf00      	nop
 8000bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bae:	bc08      	pop	{r3}
 8000bb0:	469e      	mov	lr, r3
 8000bb2:	4770      	bx	lr
